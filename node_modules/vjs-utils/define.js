var merge = require('lodash/object/merge')
  , isFunction = require('lodash/lang/isFunction')

/**
 * Conveiniece wrapper for Object.defineProperty
 * accepts multiple parameters and defaults (for each property)
 * functions as parameters are rewritten as { value: [PARAM] }
 * this function is build for conveinice not performance

 * @param {Object} parameters object maps keys to Object.definProperty name.
 * @param {Object} [ target ] target, defaults to this
 * @param {Object} [ defaultParams ] default parameters get added to property
 * @method define
 
 * TODO: think of more conventions for the arguments
 */
module.exports = exports = function $define( params, target, defaultParams ) {
  
  if(!target) target = this

  if(!defaultParams) defaultParams = exports.params

  for(var property$ in params ) {
    var property = params[property$]
    
    if( isFunction(property) ) {
      property = { value: property }
    }

    if( target.$define && target.$define.options ) {
      for(var option$ in property ) {
        console.log('!custom define option!', option$ , target.$define.options[option$])
      }
    }

    Object.defineProperty( 
      target, 
      property$, 
      merge( {}, defaultParams, property ) //only add defualt defineProps things
    )
  } 
}

/**
 * default parameters for define
 * @type {object}
 */
exports.params = {
  configurable: true,
  enumerable:false
}

