//flavourize.js
/**
 * Flavourizes a property
 * it is a function where you can add or remove something from the flavours array
 * defines field .$flavours
 */

//will create a flavour array

var clone = require('lodash/lang/clone')

var define = require('./define')

module.exports = exports = function $flavour( target, property, flavour, type ) {
	
	var field = target[property]

  if( !target.$flavours ) {

  	//only add it on the prototype thats how it should work for object etc
  	Object.defineProperty(target, '__$flavours__', {
  		configurable: true,
  		enumerable:false,
  		writable:true,
  		value:{}
  	})

  	Object.defineProperty(target, '$flavours', {
  		configurable: true,
  		enumerable: false,
  		get:function() {
  			return this.__$flavours__
  		}
  	})

  	console.log('create flavours')
  	
  }

  //hasOwnProperty is the faster check for long inheritance chains (double check this)
  if(!target.hasOwnProperty('$flavours') && target.__$flavours__) {
  	console.log('no flavours available for myself make it!')
  	target.__$flavours__ = clone(target.__$flavours__, false, function() {
  		console.log('lezzzclone', arguments)
  	})
  }

  //now make a specific new one when its an inherited property
  if(!target.$flavours[property]) { //has to become its own property as well
  	target.$flavours[property] = {}

  	//this is intereseting since now you know you have to extend
  	//add options if its a method or a set or a get
  	//flavourizes 
  }

  if(!target.$flavours[property][type]) {
  	//now you know you have to extend this specific type e.g. set/method/etc has to use define
  	//define flags
  	//use internal define stuff for this

  }

	flavour.call( target, target.$flavours[property][type] )

}

/*
hasOwnProperty

*/